1. 模块类型
#define NGX_CORE_MODULE      0x45524F43  /* "CORE" */				core/ngx_conf_file.h:
#define NGX_CONF_MODULE      0x464E4F43  /* "CONF" */				core/ngx_conf_file.h:
#define NGX_EVENT_MODULE     0x544E5645  /* "EVNT" */				event/ngx_event.h:
#define NGX_HTTP_MODULE      0x50545448  /* "HTTP" */				http/ngx_http_config.h:
#define NGX_MAIL_MODULE      0x4C49414D  /* "MAIL" */				mail/ngx_mail.h:

2. nginx把所有模块分为四类（core/event/http/mail），nginx也认为模块的上下文是四种，分别用四个结构体表示：   
	src/core/ngx_conf_file.h: 			ngx_core_module_t;
	src/mail/ngx_mail.h: 				ngx_mail_module_t;
	src/event/ngx_event.h: 				ngx_event_module_t;
	src/http/ngx_http_config.h: 		ngx_http_module_t;
	
nginx的核心类模块有7个，event类模块有10个，http类模块有47个，mail类模块有7个。另外还有一个模块是没有上下文的，是conf模块，所以准确的说nginx的模块有五种:
static ngx_core_module_t  ngx_core_module_ctx = {
static ngx_core_module_t  ngx_errlog_module_ctx = {
static ngx_core_module_t  ngx_regex_module_ctx = {
static ngx_core_module_t  ngx_events_module_ctx = {
static ngx_core_module_t  ngx_openssl_module_ctx = {
static ngx_core_module_t  ngx_http_module_ctx = {
static ngx_core_module_t  ngx_mail_module_ctx = {
static ngx_core_module_t  ngx_google_perftools_module_ctx = {

ngx_event_module_t  ngx_aio_module_ctx = { 					使用kqueue时才用到
ngx_event_module_t  ngx_devpoll_module_ctx = {
ngx_event_module_t  ngx_epoll_module_ctx = {				*** epoll ***
ngx_event_module_t  ngx_eventport_module_ctx = {
ngx_event_module_t  ngx_iocp_module_ctx = {					---WIN32
ngx_event_module_t  ngx_kqueue_module_ctx = {
ngx_event_module_t  ngx_poll_module_ctx = {
ngx_event_module_t  ngx_rtsig_module_ctx = {
ngx_event_module_t  ngx_select_module_ctx = {
ngx_win32_select_module.c(39):ngx_event_module_t  ngx_select_module_ctx = {		---WIN32




	
typedef struct {
    ngx_str_t             name;
    void               *(*create_conf)(ngx_cycle_t *cycle);
    char               *(*init_conf)(ngx_cycle_t *cycle, void *conf);
} ngx_core_module_t;


typedef struct {
    ngx_int_t   (*preconfiguration)(ngx_conf_t *cf);
    ngx_int_t   (*postconfiguration)(ngx_conf_t *cf);

    void       *(*create_main_conf)(ngx_conf_t *cf);
    char       *(*init_main_conf)(ngx_conf_t *cf, void *conf);

    void       *(*create_srv_conf)(ngx_conf_t *cf);
    char       *(*merge_srv_conf)(ngx_conf_t *cf, void *prev, void *conf);

    void       *(*create_loc_conf)(ngx_conf_t *cf);
    char       *(*merge_loc_conf)(ngx_conf_t *cf, void *prev, void *conf);
} ngx_http_module_t;

typedef struct {
    ngx_str_t              *name;

    void                 *(*create_conf)(ngx_cycle_t *cycle);
    char                 *(*init_conf)(ngx_cycle_t *cycle, void *conf);

    ngx_event_actions_t     actions;
} ngx_event_module_t;

 typedef struct {
    ngx_mail_protocol_t        *protocol;

    void                       *(*create_main_conf)(ngx_conf_t *cf);
    char                       *(*init_main_conf)(ngx_conf_t *cf, void *conf);

    void                       *(*create_srv_conf)(ngx_conf_t *cf);
    char                       *(*merge_srv_conf)(ngx_conf_t *cf, void *prev, void *conf);
} ngx_mail_module_t;
  
   
3. 模块的指令
struct ngx_command_s {
    ngx_str_t             name;						/* [analysis]   指令名称	   */		
    ngx_uint_t            type;						/* [analysis]   type是标识符集，标识指令在配置文件中的合法位置和指令的参数个数.
													 				这是一个至少有32bit的无符号整形，前16bit用于标识位置，后16bit用于标识参数 */													 
    char               *(*set)(ngx_conf_t *cf, ngx_command_t *cmd, void *conf);		/* [analysis]   函数执行解析并获取配置项值的操作 */
    ngx_uint_t            conf;						/* [analysis]   字段conf被NGX_HTTP_MODULE类型模块所用，该字段指定当前配置项所在的大致位置 */
    ngx_uint_t            offset;					/* [analysis]   解析出来的配置项值所存放的地址 */
    void                 *post;
};

指令的位域:
src/http/ngx_http_config.h:			#define NGX_HTTP_MAIN_CONF        0x02000000
src/http/ngx_http_config.h:			#define NGX_HTTP_SRV_CONF         0x04000000
src/http/ngx_http_config.h:			#define NGX_HTTP_LOC_CONF         0x08000000
src/http/ngx_http_config.h:			#define NGX_HTTP_UPS_CONF         0x10000000
src/http/ngx_http_config.h:			#define NGX_HTTP_SIF_CONF         0x20000000
src/http/ngx_http_config.h:			#define NGX_HTTP_LIF_CONF         0x40000000
src/http/ngx_http_config.h:			#define NGX_HTTP_LMT_CONF         0x80000000
src/mail/ngx_mail.h:				#define NGX_MAIL_MAIN_CONF        0x02000000
src/mail/ngx_mail.h:				#define NGX_MAIL_SRV_CONF         0x04000000
src/core/ngx_conf_file.h:			#define NGX_DIRECT_CONF      	  0x00010000
src/core/ngx_conf_file.h:			#define NGX_MAIN_CONF        	  0x01000000
src/core/ngx_conf_file.h:			#define NGX_ANY_CONF         	  0x0F000000
src/event/ngx_event.h:				#define NGX_EVENT_CONF        	  0x02000000
   
   
4. 模块的配置结构 (命名格式为:ngx_*_conf_t)
src/core/ngx_cycle.h:	 											ngx_core_conf_t;
src/mail/ngx_mail_ssl_module.h:	 									ngx_mail_ssl_conf_t;
src/mail/ngx_mail_imap_module.h:     								ngx_mail_imap_srv_conf_t;
src/mail/ngx_mail_pop3_module.h:     								gx_mail_pop3_srv_conf_t;
src/mail/ngx_mail.h:     											ngx_mail_addr_conf_t;
src/mail/ngx_mail.h:     											ngx_mail_core_main_conf_t;
src/mail/ngx_mail.h:     											ngx_mail_core_srv_conf_t;
src/mail/ngx_mail_smtp_module.h:     								ngx_mail_smtp_srv_conf_t;
src/event/ngx_event.h:     											ngx_event_conf_t;
src/http/ngx_http_core_module.h:typedef struct ngx_http_core_loc_conf_s  ngx_http_core_loc_conf_t;
src/http/ngx_http_core_module.h:     								ngx_http_core_main_conf_t;
src/http/ngx_http_core_module.h:    								ngx_http_core_srv_conf_t;
src/http/ngx_http_core_module.h:     								ngx_http_addr_conf_t;
src/http/modules/ngx_http_ssi_filter_module.h:	 					ngx_http_ssi_main_conf_t;
src/http/modules/ngx_http_ssl_module.h:	 							ngx_http_ssl_srv_conf_t;
src/http/ngx_http_upstream.h:	 									ngx_http_upstream_main_conf_t;
src/http/ngx_http_upstream.h:typedef struct ngx_http_upstream_srv_conf_s  ngx_http_upstream_srv_conf_t;
src/http/ngx_http_upstream.h:	 									ngx_http_upstream_conf_t;  
   
   
   
   
5. 信号
通过nginx -s 命令行方式指定的信号只有
stop	停止(快速停止不保存相关信息)
quit	停止(quit是一种优雅的停止，也就是进程如果还在服务中，那么就不会关闭该进程，直到进程完成服务为止。当然这个过程中不能再接受新的任务了)
reopen	重新打开日志文件
reload  当修改了配置文件以后，需要重新加载配置文件(平滑重启) 
可以通过查看ngx_process.c:	ngx_signal_t  signals[]数组, 定义了信号处理的方式。

共监控12个信号，这些信号均可以通过kill命令向master进程发送(其中两个忽略，其他均执行ngx_signal_handler).
SIGHUP 	- 平滑重启(reload)
SIGUSR1 - 重新打开日志文件(reopen)
SIGWINCH - 从容关闭工作进程   
SIGTERM - stop  
SIGQUIT - quit  
SIGUSR2 - 平滑升级可执行程序
SIGALRM - 
SIGINT -
SIGIO - 
SIGCHLD - 
SIGSYS - 
SIGPIPE -
   
=================== 启动初始化流程 =====================      
ngx_strerror_init();
ngx_get_options(argc, argv);
ngx_time_init();
ngx_regex_init();
ngx_log_init(ngx_prefix);   
ngx_ssl_init(log);
初始化init_cycle
ngx_save_argv(&init_cycle, argc, argv)
ngx_process_options(&init_cycle)			//	设置cycle变量
ngx_os_init(log)
ngx_crc32_table_init();
ngx_add_inherited_sockets(&init_cycle);
ngx_init_cycle(&init_cycle);
   
   
=================== ngx_init_cycle()流程 =====================   
ngx_timezone_update();
ngx_time_update();   


 EVENT解析配置文件
 ngx_events_block(对event模块进行点数, 确认模块类型中的序号)
	|__create_conf
	|__init_conf
		|__先获取模块上下文(定位ngx_epoll_module模块), 设置模块类型的序号
		
		
worker进程初始化时，调用所有模块的init_process(ngx_event_process_init), 根据init_conf中设置的模块类型序号查找到ngx_epoll_module模块后(ngx_event_module_t), 调用->actions.init(ngx_epoll_init)

    select - 标准方法。 如果当前平台没有更有效的方法，它是编译时默认的方法。你可以使用配置参数 --with-select_module 和 --without-select_module 来启用或禁用这个模块。
    poll - 标准方法。 如果当前平台没有更有效的方法，它是编译时默认的方法。你可以使用配置参数 --with-poll_module 和 --without-poll_module 来启用或禁用这个模块。
    kqueue - 高效的方法，使用于 FreeBSD 4.1+, OpenBSD 2.9+, NetBSD 2.0 和 MacOS X. 使用双处理器的MacOS X系统使用kqueue可能会造成内核崩溃。
    epoll - 高效的方法，使用于Linux内核2.6版本及以后的系统。在某些发行版本中，如SuSE 8.2, 有让2.4版本的内核支持epoll的补丁。
    rtsig - 可执行的实时信号，使用于Linux内核版本2.2.19以后的系统。默认情况下整个系统中不能出现大于1024个POSIX实时(排队)信号。这种情况对于高负载的服务器来说是低效的；所以有必要通过调节内核参数 /proc/sys/kernel/rtsig-max 来增加队列的大小。可是从Linux内核版本2.6.6-mm2开始， 这个参数就不再使用了，并且对于每个进程有一个独立的信号队列，这个队列的大小可以用 RLIMIT_SIGPENDING 参数调节。当这个队列过于拥塞，nginx就放弃它并且开始使用 poll 方法来处理连接直到恢复正常。
    /dev/poll - 高效的方法，使用于 Solaris 7 11/99+, HP/UX 11.22+ (eventport), IRIX 6.5.15+ 和 Tru64 UNIX 5.1A+.
    eventport - 高效的方法，使用于 Solaris 10. 为了防止出现内核崩溃的问题， 有必要安装 这个 安全补丁。 

	
ngx_event_accept(有请求来到)
	|__ngx_http_init_connection(初始化连接，加入读事件到epoll中)
		|__ngx_http_init_request(此连接有读事件到来时调用)	
		
		
=================== http配置块解析流程 =====================   		
ngx_http_block(配置文件中遇见http时将会调用)
	|__为ngx_http_conf_ctx_t申请空间，并为所有字段申请空间，每个字段指向http模块的一个配置结构
		|__调用所有模块的create_main_conf
		|__调用所有模块的create_srv_conf
		|__调用所有模块的create_loc_conf
	|__调用所有模块的preconfiguration回调
	|__调用ngx_conf_parse解析所有http配置项	（解析http {...} block里的所有内容，解析完成后返回）
	|__调用所有模块的init_main_conf回调																	
	|__ngx_http_merge_servers调用模块的merge_srv_conf 和 merge_loc_conf 两个handler处理函数				
	|__ngx_http_init_locations																			
	|__ngx_http_init_static_location_trees
	|__ngx_http_init_phases
	|__ngx_http_init_headers_in_hash
	|__调用所有模块的postconfiguration
	|__ngx_http_variables_init_vars
	|__ngx_http_init_phase_handlers
	|__ngx_http_optimize_servers

---------------模块的配置handler执行流程-------------------------
create_main_conf
create_srv_conf
create_loc_conf
preconfiguration			//	大多数是设置variables变量
init_main_conf				//	对create_main_conf中的字段初始化
merge_srv_conf				//	ngx_http_merge_servers()
merge_loc_conf				//	ngx_http_merge_servers()
postconfiguration			//	设置相应阶段的handler

ngx_http_core_server(配置文件中遇见server时将会调用)
	|__ngx_http_conf_ctx_t申请空间(其中两个字段申请空间，ctx->srv_conf 和 ctx->loc_conf )
	|__调用各个模块的 create_srv_conf 和 create_loc_conf 并赋值到ctx上
	|__设置ngx_http_core_srv_conf_t中的ctx字段
	|__向ngx_http_core_main_conf_t中的servers数组字段中添加 ngx_http_core_srv_conf_t 结构元素
	|__ngx_conf_parse()
	
ngx_http_core_location(配置文件中遇见location时将会调用)
	|__创建本级的location, main和srv的conf均使用ngx_http_core_server()函数中创建的
	|__

在这几个phase的checker中，它将所要执行的handler的返回值分为4种类型。
1 NGX_OK 此时返回NGX_AGAIN,这里我们知道如果checker返回ok的话，整个handler的处理就会直接返回，也就是这次处理结束。并且这里phase_handler被赋值为ph->next,也就是下一个phase的索引。也就是说下次将会调用它的下一个phase的checker。

2 NGX_DECLINED 此时也返回NGX_AGAIN,而这个和上面有所不同，那就是phase_handler的赋值，这里这个值只是简单的++,也就是说会紧接着处理当前phase的下一个phase，只有当前的phase的handelr处理完毕了，才可能会处理下一个phase的handler

3 NGX_AGAIN 或者NGX_DONE，这个的话直接返回OK,也就是会结束handler的处理。

4 剩余的情况，主要是处理NGX_ERROR,以及NGX_HTTP_(也就是返回一些http的状态码)的处理。 	
	
--------------- phase的checker -------------------------	
NGX_HTTP_POST_READ_PHASE					ngx_http_core_generic_phase
NGX_HTTP_SERVER_REWRITE_PHASE				ngx_http_core_rewrite_phase
NGX_HTTP_FIND_CONFIG_PHASE					ngx_http_core_find_config_phase
NGX_HTTP_REWRITE_PHASE						ngx_http_core_rewrite_phase
NGX_HTTP_POST_REWRITE_PHASE					ngx_http_core_post_rewrite_phase
NGX_HTTP_PREACCESS_PHASE					ngx_http_core_generic_phase
NGX_HTTP_ACCESS_PHASE						ngx_http_core_access_phase
NGX_HTTP_POST_ACCESS_PHASE					ngx_http_core_post_access_phase
NGX_HTTP_TRY_FILES_PHASE					ngx_http_core_try_files_phase
NGX_HTTP_CONTENT_PHASE						ngx_http_core_content_phase
NGX_HTTP_LOG_PHASE							ngx_http_core_generic_phase	


--------------- phase	注册的handler -------------------------	
NGX_HTTP_POST_READ_PHASE					ngx_http_realip_handler()
							
NGX_HTTP_SERVER_REWRITE_PHASE				ngx_http_rewrite_handler()

NGX_HTTP_FIND_CONFIG_PHASE					ngx_http_core_find_config_phase()里会自动调用相应的handler
									
NGX_HTTP_REWRITE_PHASE						ngx_http_rewrite_handler()	  
									  
NGX_HTTP_POST_REWRITE_PHASE					ngx_http_core_post_rewrite_phase()里会自动调用相应的handler
								
NGX_HTTP_PREACCESS_PHASE					ngx_http_degradation_handler()
											ngx_http_limit_conn_handler()
											ngx_http_limit_req_handler()
											ngx_http_realip_handler()											
											
NGX_HTTP_ACCESS_PHASE						ngx_http_access_handler()
											ngx_http_auth_basic_handler()
											
NGX_HTTP_POST_ACCESS_PHASE					ngx_http_core_post_access_phase()里会自动调用相应的handler

NGX_HTTP_TRY_FILES_PHASE					ngx_http_core_try_files_phase()	里会自动调用相应的handler

NGX_HTTP_CONTENT_PHASE						ngx_http_autoindex_handler()
											ngx_http_dav_handler()
											ngx_http_gzip_static_handler()
											ngx_http_index_handler()
											ngx_http_random_index_handler()
											ngx_http_static_handler()

NGX_HTTP_LOG_PHASE							ngx_http_log_handler()



这里需要注意就是只有下面这几个phase会有多个handler:
		NGX_HTTP_POST_READ_PHASE   
        NGX_HTTP_SERVER_REWRITE_PHASE,  
        NGX_HTTP_REWRITE_PHASE,  
        NGX_HTTP_PREACCESS_PHASE,  
        NGX_HTTP_ACCESS_PHASE,  
        NGX_HTTP_CONTENT_PHASE,  
        NGX_HTTP_LOG_PHASE  
剩余的都是只有一个handler的:
		NGX_HTTP_FIND_CONFIG_PHASE	
		NGX_HTTP_POST_REWRITE_PHASE
		NGX_HTTP_POST_ACCESS_PHASE
		NGX_HTTP_TRY_FILES_PHASE
		
//  
ph[0].checker = ngx_http_core_generic_phase;  
ph[0].handler = ngx_http_rewrite_handler;  
ph[1].checker = ngx_http_core_find_config_phase;  
ph[1].handler = NULL;  
ph[2].checker = ngx_http_core_generic_phase;  
ph[2].handler = ngx_http_rewrite_handler;  
ph[3].checker = ngx_http_core_post_rewrite_phase;  
ph[3].handler = NULL;  
ph[4].checker = ngx_http_core_generic_phase;  
ph[4].handler = ngx_http_limit_req_handler;  
ph[5].checker = ngx_http_core_generic_phase;  
ph[5].handler = ngx_http_limit_zone_handler;  
ph[6].checker = ngx_http_core_access_phase;  
ph[6].handler = ngx_http_access_handler;  
ph[7].checker = ngx_http_core_access_phase;  
ph[7].handler = ngx_http_auth_basic_handler;  
ph[8].checker = ngx_http_core_post_access_phase;  
ph[8].handler = NULL;  
ph[9].checker = ngx_http_core_content_phase;  
ph[9].handler = ngx_http_index_handler;  
ph[10].checker = ngx_http_core_content_phase;  
ph[10].handler = ngx_http_autoindex_handler;  
ph[11].checker = ngx_http_core_content_phase;  
ph[11].handler = ngx_http_static_handler;  
ph[12].checker = ngx_http_core_generic_phase;  
ph[12].handler = ngx_http_log_handler; 
		
--------------- 请求处理流程 -------------------------			
ngx_http_init_connection
	|__ngx_http_init_request
		|__ngx_http_process_request_line
			|__ngx_http_read_request_header(读取request line)
			|__ngx_http_parse_request_line(解析request line)
			|__ngx_http_process_request_headers(处理request headers)
				|__ngx_http_read_request_header(读取request header)
				|__ngx_http_parse_header_line(解析request header)
				|__ngx_http_process_request_header	做一些检查操作
				|__ngx_http_process_request
					|__ngx_http_handler
						|__ngx_http_core_run_phases
					|__ngx_http_run_posted_requests
	
	
1. 有新的accept连接到来时，调用accept监听句柄的回调函数ngx_http_init_connection
		注册读回调函数：rev->handler = ngx_http_init_request;
		注册写回调函数：write->handler = ngx_http_empty_handler;
		将读事件加入到epoll事件监控队列中：ngx_handle_read_event(rev, 0);
		
2. 新的请求到来时调用上步中注册的回调函数 ngx_http_init_request()
		注册读回调函数：rev->handler = ngx_http_process_request_line;		//	处理请求行的内容
		r->read_event_handler = ngx_http_block_reading;
		
		
3. 直接调用 rev->handler()函数(ngx_http_process_request_line), 开始读取请求行
		解析请求行:	ngx_http_parse_request_line
		注册读回调函数(读取请求头)：rev->handler = ngx_http_process_request_headers;
		
4.  直接调用处理请求头ngx_http_process_request_headers函数
		当请求头解析完毕后:	ngx_http_process_request_header 做一些检查操作
		
5. 开始处理请求 ngx_http_process_request()
		c->read->handler = ngx_http_request_handler;				
		c->write->handler = ngx_http_request_handler;
		r->read_event_handler = ngx_http_block_reading;				
	此请求在有连接发来时将直接调用 ngx_http_request_handler 函数
	
6. 开始HTTP业务流程处理：ngx_http_handler()
		r->write_event_handler = ngx_http_core_run_phases;

7. 开始运行所有phase. ngx_http_core_run_phase()
	phase阶段在ngx_http_core_content_phase中发生于filter有关的操作
	content phase阶段默认有3个handler			
					
					
---------------------http-variables变量---------------------
ngx_http_core_variables静态数组中的所有变量加入到 ngx_http_core_main_conf_t的 ngx_hash_keys_arrays_t    *variables_keys;字段
												  ngx_http_core_main_conf_t的 ngx_hash_t                 variables_hash;字段



---------------------hash表处理基本流程---------------------												  
1. 申请存放N个 ngx_hash_key_t 的数组 array
2. 对 上步所有的 ngx_hash_key_t 的3个字段进行赋值，
	    hashkey->key = urls[loop];
        hashkey->key_hash = ngx_hash_key_lc(urls[loop].data, urls[loop].len);
        hashkey->value = (void*)values[loop];

3. 调用 ngx_hash_init() 创建hash表，ngx_hash_init(&hinit, (ngx_hash_key_t*)array->elts, array->nelts);
4. 调用 ngx_hash_find 在上步中创建出来的hash表中进行查找
	key = ngx_hash_key_lc(addr[loop].data, addr[loop].len);
	ngx_hash_find(hash, key, addr[loop].data, addr[loop].len);		
	
	
---------------------  变量 ---------------------
脚本引擎中指定的变量，才会在处理时将变量的值存放到 r->variables 中

hash过的变量数组添加到 cmcf->variables_keys.keys 数组中
索引变量被添加到 cmcf->variables 数组中
1)	索引变量，我们通过ngx_http_get_variable_index来获得一个索引变量的索引号。然后可以通过
	ngx_http_get_indexed_variable与ngx_http_get_flushed_variable来获取索引过变量的值
	
2)	未索引过的变量，则只能通过ngx_http_get_variable来获取变量的值。

注意因为只有索引过的变量的值才会缓存到ngx_http_request_t的variables中, 如果当前变量是可缓存的，要将该变
量建立索引，即调用完ngx_http_add_variable后，再调用ngx_http_get_variable_index来将该变量建
立索引。

ngx_http_get_flushed_variable会考虑到变量的cache标志，如果变量是可缓存的，则只有在变
量是合法的时才返回变量的值，否则重新获取变量的值。
而ngx_http_get_indexed_variable则不管变量是否可缓存，只要获取过一次了，不管是否成功，则都不
会再获取了。

//	初始化hash过的变量数组（cmcf->variables_keys.keys）,将 ngx_http_core_variables 中的变量加入到hash过的变量数组中
//	加入到 cmcf->variables_keys.keys 中的变量空间未重新分配，而是使用静态数组的内存空间
ngx_http_core_preconfiguration

//	添加upstream模块中的变量到hash过的变量数组（cmcf->variables_keys.keys）
//	加入到 cmcf->variables_keys.keys 中的变量空间重新申请的内存空间，未使用静态数组的空间
ngx_http_upstream_add_variables
	|--ngx_http_add_variable--调用此函数时新添加的变量重新申请内存空间		
		
		
---------------------  脚本引擎 ---------------------
ngx_http_rewrite_set
	|--ngx_http_add_variable
	|--ngx_http_get_variable_index
	|--ngx_http_rewrite_value
		|--ngx_http_script_variables_count
		|--value=常量字符串
			|-- ngx_http_script_start_code(lcf->codes): ngx_http_script_value_code_t (ngx_http_script_value_code()函数处理)
	
	
	|--ngx_http_script_start_code(lcf->codes)：ngx_http_script_var_code_t (ngx_http_script_set_var_code()函数处理)

	

if ( $uri = abc) {
	set $test hello;
	set $file ${uri}abc;
}

$uri 		->	ngx_http_script_var_code_t
				ngx_http_script_var_code()		- 获取到变量到值存放在e->sp数组中

abc  		->  ngx_http_script_value_code_t
				ngx_http_script_value_code()	- 设置常量字符串的值到e-sp数组中
		
=			->  无
				ngx_http_script_equal_code()
		
上边解析完后，会设置一个
			->  ngx_http_script_if_code_t
				ngx_http_script_if_code()
			
hello		->	ngx_http_script_value_code_t	
				ngx_http_script_value_code()
			
$test		->	ngx_http_script_var_code_t
			->	ngx_http_script_set_var_code()
		
${uri}abc	->	ngx_http_script_complex_value_code_t
				ngx_http_script_complex_value_code()				
	${uri}  ->	ngx_http_script_add_var_code()
					|--ngx_http_script_add_code(sc->lengths)
					|--ngx_http_script_var_code_t
					|--ngx_http_script_copy_var_len_code()	
					------------------------------------------
					|--ngx_http_script_add_code(sc->values)
					|--ngx_http_script_var_code_t
					|--ngx_http_script_copy_var_code()	
					
	abc		->	ngx_http_script_add_copy_code()
					|--ngx_http_script_add_code(sc->lengths)
					|--ngx_http_script_copy_code_t
					|--ngx_http_script_copy_len_code()
					------------------------------------------
					|--ngx_http_script_add_code(sc->values)
					|--ngx_http_script_copy_code_t + len
					|--ngx_http_script_copy_code()
	ngx_http_script_done()
		
				
				
$file		->
	

使用前 lengths和values 两个字段需要指向需要的字段，指向的字段可以为空不分配空间，
空间将会再 ngx_http_script_init_arrays() 函数中申请	。

ngx_http_script_compile()
	|-- ngx_http_script_init_arrays()
	|-- ngx_http_script_add_var_code() 变量添加使用
		|-- ngx_http_get_variable_index() 添加变量到变量索引数组
		|-- ngx_http_script_add_code(sc->lengths, ngx_http_script_var_code_t) 添加结构到lengths数组
			|-- ngx_http_script_copy_var_len_code()
			|-- index = 变量索引数组Index
		|-- ngx_http_script_add_code(sc->values, ngx_http_script_var_code_t) 添加结构到values数组
			|-- ngx_http_script_copy_var_code()
			|-- index = 变量索引数组Index
	|-- ngx_http_script_add_copy_code() 普通字符串常量添加使用
		|-- ngx_http_script_add_code(sc->lengths, ngx_http_script_copy_code_t) 添加结构到lengths数组
			|-- ngx_http_script_copy_len_code()
			|-- code->len = 常量字符串的长度
		|-- ngx_http_script_add_code(sc->values, ngx_http_script_copy_code_t + len(常量字符串长度)) 添加结构到values数组
			|-- ngx_http_script_copy_code()
			|-- code->len = 常量字符串的长度
			
	|-- ngx_http_script_done()



-----------------	 ngx_http_finalize_request	 --------------------

ngx_http_finalize_request(ngx_http_request_t *r, ngx_int_t rc)			结束请求
	|-- ngx_http_close_request()
	|--	ngx_http_finalize_connection()
		
	

-----------------	 proxy_upstream	 --------------------	
ngx_http_upstream_create_main_conf() 函数中创建	 ngx_http_upstream_main_conf_t 结构
ngx_http_proxy_create_loc_conf() 函数中创建 ngx_http_proxy_loc_conf_t 结构

ngx_http_upstream(ngx_conf_t *cf, ngx_command_t *cmd, void *dummy)
	|-- ngx_http_upstream_add()
		|-- uscf->host = u->host;
	
ngx_http_proxy_pass() 解析proxy_pass指令
	|-- 设置 content phase 阶段的handler ngx_http_proxy_handler()
	|-- ngx_http_upstream_add() 函数将增加 ngx_http_upstream_srv_conf_t 到 ngx_http_upstream_main_conf_t 中upstreams数组中，增加 
	ngx_http_upstream_server_t 到 ngx_http_upstream_srv_conf_t-> servers(array of ngx_http_upstream_server_t中)
	|--	ngx_http_proxy_loc_conf_t.ngx_http_upstream_conf_t.ngx_http_upstream_srv_conf_t 是指向 ngx_http_upstream_main_conf_t 
		的upstreams数组中，ngx_http_upstream_srv_conf_t 元素地址的指针
	
ngx_http_upstream_init_main_conf() 后续会被调用
	1. 检查 ngx_http_upstream_main_conf_t 中upstreams数组中所有的 （ngx_http_upstream_srv_conf_t ）uscfp[i]->peer.init_upstream ，
		是否被赋值，未被赋值将使用默认 ngx_http_upstream_init_round_robin()，并且调用此函数。
		即upstream使用的负载均衡类型是哪种, 1.1.17中带有的类型为
			uscf->peer.init_upstream = ngx_http_upstream_init_ip_hash;
			uscf->peer.init_upstream = ngx_http_upstream_init_keepalive;
			uscf->peer.init_upstream = ngx_http_upstream_init_round_robin;	默认采用的方式
		
		
		ngx_http_upstream_init_ip_hash(ngx_conf_t *cf, ngx_http_upstream_srv_conf_t *us)
			|-- ngx_http_upstream_init_round_robin(cf, us)
			|-- us->peer.init = ngx_http_upstream_init_ip_hash_peer
		
		ngx_http_upstream_init_keepalive(ngx_conf_t *cf, ngx_http_upstream_srv_conf_t *us)
			|-- us->peer.init = ngx_http_upstream_init_keepalive_peer
			
		ngx_http_upstream_init_round_robin(ngx_conf_t *cf, ngx_http_upstream_srv_conf_t *us)
			|-- us->peer.init = ngx_http_upstream_init_round_robin_peer
			|-- 对us->servers中的所有后端服务器进行归类（backup和非backup类），归类后映射成对应的表存放于 ngx_http_upstream_rr_peers_t 和 
				ngx_http_upstream_rr_peer_t 中.
		
	2. 并对静态数组中的 ngx_http_upstream_header_t  ngx_http_upstream_headers_in[] 所有变量进行hash计算，
		创建好的hash表，将存放在 ngx_http_upstream_main_conf_t->headers_in_hash 字段中。
	
ngx_http_proxy_handler() 被调用时
	|-- ngx_http_upstream_create() 在 r->upstream 上创建 ngx_http_upstream_t
	|-- 申请 ngx_http_proxy_ctx_t 的空间
	|-- ngx_http_set_ctx(r, ctx, ngx_http_proxy_module)
	|-- u->conf = &plcf->upstream; (ngx_http_upstream_t.ngx_http_upstream_conf_t --> ngx_http_proxy_loc_conf_t.ngx_http_upstream_conf_t)
	|-- 设置 r->upstream 结构, 各种回调将再次处被设置
	|-- ngx_http_read_client_request_body(r, ngx_http_upstream_init)
		|-- ***************	ngx_http_upstream_init() 某种条件满足的情况下，会调用. 此函数是调用upstream模块运转的初始化函数
			|-- ngx_http_upstream_init_request()
				|-- u->create_request(r); 		//	ngx_http_proxy_create_request()
				|-- uscf->peer.init(r, uscf); 	//  ngx_http_upstream_init_round_robin_peer()
				|-- ngx_http_upstream_connect();	
					|-- ngx_event_connect_peer()
					|-- ngx_http_upstream_send_request()
	
ngx_http_upstream_t.ngx_http_upstream_conf_t.ngx_http_upstream_srv_conf_t	
	
ngx_http_finalize_request
	|-- ngx_http_finalize_connection
	
ngx_http_finalize_connection
	|-- ngx_http_close_request
	
ngx_http_close_request
	|--	ngx_http_free_request
	|--	ngx_http_close_connection	

ngx_http_free_request	
	|-- 调用所有请求上的清理函数
	|-- r->connection->destroyed = 1;
	|-- ngx_destroy_pool(r->pool);			//	释放请求request的内存池
	
ngx_http_close_connection
	|-- c->destroyed = 1;
	|-- ngx_close_connection				//	关闭socket	
	|-- ngx_destroy_pool					//	释放连接的内存池
	
ngx_http_terminate_request	
	
	
// ------------------- upstream module --------------------	
ngx_http_upstream_t				--	应该是整个upstream运转过程中使用的结构
ngx_http_upstream_main_conf_t	--	对应整个http block {...} 内的所有upstream block {...}, 主要是管理 ngx_http_upstream_srv_conf_t
ngx_http_upstream_srv_conf_t	--	对应于单个 upstream block {...}
ngx_http_upstream_server_t		--	对应于 upstream block {...} 中的单个 server 指令
ngx_http_upstream_conf_t		--	为了达到通用的目的而设计的一个结构体(strategy模式)。upstream在执行时使用此结构将不变的部分分离处理，
									变化的内容通过此结构来提供给各个模块使用
ngx_http_upstream_peer_t		--	用于管理upstream block {...} 中的使用的负载均衡类型, 


// ------------------- upstream round robin --------------------
此模块使用了3个结构体:
ngx_http_upstream_rr_peer_t				--		后端服务器的每个IP对应于此结构
ngx_http_upstream_rr_peers_t			-- 		对应于一个upstream block 块 (ngx_http_upstream_srv_conf_t 结构)
ngx_http_upstream_rr_peer_data_t	
	
// ------------------- upstream FAQ --------------------
1. ngx_http_upstream_init_round_robin_peer() 和 ngx_http_upstream_create_round_robin_peer()区别？
	
	
	
	
// ------------------- 静态文件缓存 --------------------
打开文件和获取文件信息失败都会设置errno

文件被关闭，但是没有在rbtree中删除，fd=NGX_INVALID_FILE
打开文件和获取文件信息失败，fd=NGX_INVALID_FILE
文件被close()，fd=NGX_INVALID_FILE


一、	开启了缓存功能
1. 注册cleaup清理函数到request的pool上
2. 获取当前时间
3. 根据打开文件的文字计算CRC32
4. 在静态文件缓存表上查找此文件，将有两种情况:
	第一种情况找到此文件：
	1. 将此cache文件的使用次数加一
	2. 将此cache文件从expire_queue队列中删除，为什么删除？？
	
			
		
		
	
二、	未开启缓存功能
	
	
	
	
	
// ======================	我系统上postconfiguration初始化的顺序  ======================
ngx_http_log_init
ngx_http_static_init
ngx_http_autoindex_init
ngx_http_index_init
ngx_http_auth_basic_init
ngx_http_access_init
ngx_http_limit_conn_init
ngx_http_limit_req_init
ngx_http_rewrite_init
ngx_http_write_filter_init
ngx_http_header_filter_init
ngx_http_chunked_filter_init
ngx_http_range_header_filter_init
ngx_http_gzip_filter_init
ngx_http_postpone_filter_init
ngx_http_ssi_filter_init
ngx_http_charset_postconfiguration
ngx_http_userid_init
ngx_http_headers_filter_init
ngx_http_echo_filter_init
ngx_http_copy_filter_init
ngx_http_range_body_filter_init
ngx_http_not_modified_filter_init	
	
-----	body filter注册顺序, 先注册的最后被调用 -----
ngx_http_write_filter(body filter)
ngx_http_chunked_body_filter(body filter)
ngx_http_gzip_body_filter(body filter)
ngx_http_postpone_filter(body filter)
ngx_http_ssi_body_filter(body filter)
ngx_http_charset_body_filter(body filter)
ngx_http_copy_filter(body filter)
ngx_http_range_body_filter(body filter)
	
-----	header filter注册顺序, 先注册的最后被调用 -----	
ngx_http_header_filter(header filter)
ngx_http_chunked_header_filter(header filter)
ngx_http_range_header_filter(header filter)
ngx_http_gzip_header_filter(header filter)
ngx_http_ssi_header_filter(header filter)
ngx_http_charset_header_filter(header filter)
ngx_http_userid_filter(header filter)
ngx_http_headers_filter(header filter)
ngx_http_not_modified_header_filter(header filter)	
	
// ======================	对nginx内部重定向理解	======================
nginx内部重定向仅


// ======================	对nginx命令配置的理解	======================	
	

		
		
		
		
		
		
		
		
		
		
		
   
   
   
   
   
   
   
   
   
   
   