
daemon off;
#master_process  off;
#user  nobody;
worker_processes  1;

worker_rlimit_core 500M;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;
error_log logs/error.log debug;
#pid        logs/nginx.pid;

events {
    worker_connections  4096;
}

http {
	include       mime.types;
    #default_type  application/octet-stream;

	limit_conn_zone $binary_remote_addr zone=xyz:10m;	
	limit_conn xyz 3;	

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65 15;

    #gzip  on;
	
	upstream backend123 {
	    server money.163.com;
		#server money.163.com/;    
		server www.baidu.com;
	}

    server {
		listen 80;

		#server_name_in_redirect off;			#	如果这个指令打开，nginx将使用server_name指定的基本服务器名作为重定向地址，如果关闭，nginx将使用请求中的主机头。

		#	saved request 
		#client_body_in_file_only on;
			
		server_tokens off;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;
		
		#加载[proxy模块]的测试配置
		include cmdConf/http_proxy_module_cmd.conf;
	
		#加载[addition模块]的测试配置
		include cmdConf/http_addition_module_cmd.conf;

		#加载[headers_filter模块]的测试配置
		include cmdConf/http_headers_filter_module_cmd.conf;

		location /helloProxy/ {
			proxy_temp_path /var/yyyyyyy 2 3 6;
			proxy_pass http://192.168.124.1:6666;
			proxy_set_header AAA BBB;
			proxy_set_body aaa888bbb999cccc;
		}

		location ~* /NginxStatus {
			stub_status on;
			access_log on;
			#allow 192.168.124.1;
			#auth_basic "6v";
			#auth_basic_user_file conf/htpasswd;
		}

		location ~* \.(gif|jpg|jpeg)$ {
			root /usr/local/nginx/html;	
			index 50x.html;
		}


		location /index.html {
			root html;
			disable_symlinks on;
			open_file_cache max=10;
			#alias html;
#			index 50x.html;		
			#index /testHello/;
		#	index index.html;
		}

		location = /testIf {
		
			if ( $http_user_agent  ~* msie ) {
				return 404;
			}


			if ($request_method = GET) {
				return 405;
			}	


		}

		location = /testInnerVar {
			echo http_user_agent: $http_user_agent;
			echo http_host: $http_host;
			echo hostname:	$hostname;
			echo request_method: $request_method;

			echo nginx_version:	$nginx_version;
			echo content_length: $content_length;
			echo content_type:	$content_type;
			echo cookie_COOKIE:	$cookie_COOKIE;
			echo remote_addr:	$remote_addr;
			echo remote_port:	$remote_port;
			echo server_name:	$server_name;
			echo server_port:	$server_port;
			echo server_protocol:	$server_protocol;
			echo uri:	$uri;
			echo args:	$args;
			echo binary_remote_addr:	$binary_remote_addr;
		
		}


        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }

    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443;
    #    server_name  localhost;

    #    ssl                  on;
    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_timeout  5m;

    #    ssl_protocols  SSLv2 SSLv3 TLSv1;
    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers   on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
